{"/home/travis/build/npmtest/node-npmtest-args/test.js":"/* istanbul instrument in package npmtest_args */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-args/lib.npmtest_args.js":"/* istanbul instrument in package npmtest_args */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_args = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_args = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-args/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-args && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_args */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_args\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_args.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_args.rollup.js'] =\n            local.assetsDict['/assets.npmtest_args.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_args.__dirname + '/lib.npmtest_args.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-args/node_modules/args/index.js":"'use strict';\n\n// Native\nconst path = require('path');\nconst spawn = require('child_process').spawn;\n\n// Packages\nconst parser = require('minimist');\nconst pkginfo = require('pkginfo');\nconst camelcase = require('camelcase');\nconst chalk = require('chalk');\nconst stringSimilarity = require('string-similarity');\n\nclass Args {\n  constructor() {\n    // Will later hold registered options and commands\n    this.details = {\n      options: [],\n      commands: [],\n      examples: []\n    };\n\n    // Configuration defaults\n    this.config = {\n      help: true,\n      version: true,\n      usageFilter: null,\n      value: null,\n      name: null,\n      mainColor: 'yellow',\n      subColor: 'dim'\n    };\n\n    this.printMainColor = chalk;\n    this.printSubColor = chalk;\n  }\n\n  example(usage, description) {\n    if (typeof usage !== 'string' || typeof description !== 'string') {\n      throw new TypeError(\n        'Usage for adding an Example: args.example(\"usage\", \"description\")'\n      );\n    }\n    this.details.examples.push({ usage, description });\n\n    return this;\n  }\n\n  examples(list) {\n    if (list.constructor !== Array) {\n      throw new Error('Item passed to .examples is not an array');\n    }\n\n    for (const item of list) {\n      const usage = item.usage || false;\n      const description = item.description || false;\n      this.example(usage, description);\n    }\n\n    return this;\n  }\n\n  options(list) {\n    if (list.constructor !== Array) {\n      throw new Error('Item passed to .options is not an array');\n    }\n\n    for (const item of list) {\n      const preset = item.defaultValue;\n      const init = item.init || false;\n\n      this.option(item.name, item.description, preset, init);\n    }\n\n    return this;\n  }\n\n  option(name, description, defaultValue, init) {\n    let usage = [];\n\n    const assignShort = (name, options, short) => {\n      if (options.find(flagName => flagName.usage[0] === short)) {\n        short = name.charAt(0).toUpperCase();\n      }\n      return [short, name];\n    };\n\n    // If name is an array, pick the values\n    // Otherwise just use the whole thing\n    switch (name.constructor) {\n      case String:\n        usage = assignShort(name, this.details.options, name.charAt(0));\n        break;\n      case Array:\n        usage = usage.concat(name);\n        break;\n      default:\n        throw new Error('Invalid name for option');\n    }\n\n    // Throw error if short option is too long\n    if (usage.length > 0 && usage[0].length > 1) {\n      throw new Error('Short version of option is longer than 1 char');\n    }\n\n    const optionDetails = {\n      defaultValue,\n      usage,\n      description\n    };\n\n    let defaultIsWrong;\n\n    switch (defaultValue) {\n      case false:\n        defaultIsWrong = true;\n        break;\n      case null:\n        defaultIsWrong = true;\n        break;\n      case undefined:\n        defaultIsWrong = true;\n        break;\n      default:\n        defaultIsWrong = false;\n    }\n\n    // Set initializer depending on type of default value\n    if (!defaultIsWrong) {\n      const initFunction = typeof init === 'function';\n      optionDetails.init = initFunction\n        ? init\n        : this.handleType(defaultValue)[1];\n    }\n\n    // Register option to global scope\n    this.details.options.push(optionDetails);\n\n    // Allow chaining of .option()\n    return this;\n  }\n\n  command(usage, description, init, aliases) {\n    if (Array.isArray(init)) {\n      aliases = init;\n      init = undefined;\n    }\n    if (aliases && Array.isArray(aliases)) {\n      usage = [].concat([usage], aliases);\n    }\n\n    // Register command to global scope\n    this.details.commands.push({\n      usage,\n      description,\n      init: typeof init === 'function' ? init : false\n    });\n\n    // Allow chaining of .command()\n    return this;\n  }\n\n  handleType(value) {\n    let type = value;\n\n    if (typeof value !== 'function') {\n      type = value.constructor;\n    }\n\n    // Depending on the type of the default value,\n    // select a default initializer function\n    switch (type) {\n      case String:\n        return ['[value]'];\n      case Array:\n        return ['<list>'];\n      case Number:\n      case parseInt:\n        return ['<n>', parseInt];\n      default:\n        return [''];\n    }\n  }\n\n  readOption(option) {\n    let value = option.defaultValue;\n    const contents = {};\n\n    // If option has been used, get its value\n    for (const name of option.usage) {\n      const fromArgs = this.raw[name];\n      if (typeof fromArgs !== 'undefined') {\n        value = fromArgs;\n      }\n    }\n\n    // Process the option's value\n    for (let name of option.usage) {\n      let propVal = value;\n\n      if (\n        typeof option.defaultValue !== 'undefined' &&\n        typeof propVal !== typeof option.defaultValue\n      ) {\n        propVal = option.defaultValue;\n      }\n\n      let condition = true;\n\n      if (option.init) {\n        // Only use the toString initializer if value is a number\n        if (option.init === toString) {\n          condition = propVal.constructor === Number;\n        }\n\n        if (condition) {\n          // Pass it through the initializer\n          propVal = option.init(propVal);\n        }\n      }\n\n      // Camelcase option name (skip short flag)\n      if (name.length > 1) {\n        name = camelcase(name);\n      }\n\n      // Add option to list\n      contents[name] = propVal;\n    }\n\n    return contents;\n  }\n\n  getOptions() {\n    const options = {};\n    const args = {};\n\n    // Copy over the arguments\n    Object.assign(args, this.raw);\n    delete args._;\n\n    // Set option defaults\n    for (const option of this.details.options) {\n      if (typeof option.defaultValue === 'undefined') {\n        continue;\n      }\n\n      Object.assign(options, this.readOption(option));\n    }\n\n    // Override defaults if used in command line\n    for (const option in args) {\n      if (!{}.hasOwnProperty.call(args, option)) {\n        continue;\n      }\n\n      const related = this.isDefined(option, 'options');\n\n      if (related) {\n        const details = this.readOption(related);\n        Object.assign(options, details);\n      } else {\n        // Unknown Option\n        const availableOptions = [].concat(\n          ...this.details.options.map(opt => opt.usage)\n        );\n        const suggestOption = stringSimilarity.findBestMatch(\n          option,\n          availableOptions\n        );\n\n        process.stdout.write(`The option \"${option}\" is unknown.`);\n\n        if (suggestOption.bestMatch.rating >= 0.5) {\n          process.stdout.write(' Did you mean the following one?\\n');\n\n          const suggestion = this.details.options.filter(item => {\n            for (const flag of item.usage) {\n              if (flag === suggestOption.bestMatch.target) {\n                return true;\n              }\n            }\n\n            return false;\n          });\n\n          process.stdout.write(\n            this.generateDetails(suggestion)[0].trim() + '\\n'\n          );\n\n          // eslint-disable-next-line unicorn/no-process-exit\n          process.exit();\n        } else {\n          process.stdout.write(` Here's a list of all available options: \\n`);\n          this.showHelp();\n        }\n      }\n    }\n\n    return options;\n  }\n\n  generateExamples() {\n    const examples = this.details.examples;\n    const parts = [];\n\n    for (const item in examples) {\n      if (!{}.hasOwnProperty.call(examples, item)) {\n        continue;\n      }\n      const usage = this.printSubColor('$ ' + examples[item].usage);\n      const description = this.printMainColor(\n        '- ' + examples[item].description\n      );\n      parts.push(`  ${description}\\n\\n    ${usage}\\n\\n`);\n    }\n\n    return parts;\n  }\n\n  generateDetails(kind) {\n    // Get all properties of kind from global scope\n    const items = typeof kind === 'string' ? this.details[kind] : kind;\n    const parts = [];\n    const isCmd = kind === 'commands';\n\n    // Sort items alphabetically\n    items.sort((a, b) => {\n      const first = isCmd ? a.usage : a.usage[1];\n      const second = isCmd ? b.usage : b.usage[1];\n\n      switch (true) {\n        case first < second:\n          return -1;\n        case first > second:\n          return 1;\n        default:\n          return 0;\n      }\n    });\n\n    for (const item in items) {\n      if (!{}.hasOwnProperty.call(items, item)) {\n        continue;\n      }\n\n      let usage = items[item].usage;\n      let initial = items[item].defaultValue;\n\n      // If usage is an array, show its contents\n      if (usage.constructor === Array) {\n        if (isCmd) {\n          usage = usage.join(', ');\n        } else {\n          const isVersion = usage.indexOf('v');\n          usage = `-${usage[0]}, --${usage[1]}`;\n\n          if (!initial) {\n            initial = items[item].init;\n          }\n\n          usage += initial && isVersion === -1\n            ? ' ' + this.handleType(initial)[0]\n            : '';\n        }\n      }\n\n      // Overwrite usage with readable syntax\n      items[item].usage = usage;\n    }\n\n    // Find length of longest option or command\n    // Before doing that, make a copy of the original array\n    const longest = items.slice().sort((a, b) => {\n      return b.usage.length - a.usage.length;\n    })[0].usage.length;\n\n    for (const item of items) {\n      let usage = item.usage;\n      let description = item.description;\n      const defaultValue = item.defaultValue;\n      const difference = longest - usage.length;\n\n      // Compensate the difference to longest property with spaces\n      usage += ' '.repeat(difference);\n\n      // Add some space around it as well\n      if (typeof defaultValue !== 'undefined') {\n        if (typeof defaultValue === 'boolean') {\n          description += ` (${defaultValue ? 'enabled' : 'disabled'} by default)`;\n        } else {\n          description += ` (defaults to ${JSON.stringify(defaultValue)})`;\n        }\n      }\n      parts.push(\n        '  ' +\n          this.printMainColor(usage) +\n          '  ' +\n          this.printSubColor(description)\n      );\n    }\n\n    return parts;\n  }\n\n  runCommand(details, options) {\n    // If help is disabled, remove initializer\n    if (details.usage === 'help' && !this.config.help) {\n      details.init = false;\n    }\n\n    // If command has initializer, call it\n    if (details.init) {\n      const sub = [].concat(this.sub);\n      sub.shift();\n\n      return details.init.bind(this)(details.usage, sub, options);\n    }\n\n    // Generate full name of binary\n    const full = this.binary +\n      '-' +\n      (Array.isArray(details.usage) ? details.usage[0] : details.usage);\n\n    const args = process.argv;\n    let i = 0;\n\n    while (i < 3) {\n      args.shift();\n      i++;\n    }\n\n    // Run binary of sub command\n    this.child = spawn(full, args, {\n      stdio: 'inherit'\n    });\n\n    // Throw an error if something fails within that binary\n    this.child.on('error', err => {\n      throw err;\n    });\n\n    this.child.on('exit', (code, signal) => {\n      process.on('exit', () => {\n        this.child = null;\n        if (signal) {\n          process.kill(process.pid, signal);\n        } else {\n          process.exit(code);\n        }\n      });\n    });\n\n    // Proxy SIGINT to child process\n    process.on('SIGINT', () => {\n      if (this.child) {\n        this.child.kill('SIGINT');\n        this.child.kill('SIGTERM'); // If that didn't work, we're probably in an infinite loop, so make it die\n      }\n    });\n  }\n\n  checkVersion() {\n    const parent = module.parent;\n\n    // Load parent module\n    pkginfo(parent);\n\n    // And get its version propery\n    const version = parent.exports.version;\n\n    if (version) {\n      // If it exists, register it as a default option\n      this.option('version', 'Output the version number');\n\n      // And immediately output it if used in command line\n      if (this.raw.v || this.raw.version) {\n        console.log(version);\n\n        // eslint-disable-next-line unicorn/no-process-exit\n        process.exit();\n      }\n    }\n  }\n\n  isDefined(name, list) {\n    // Get all items of kind\n    const children = this.details[list];\n\n    // Check if a child matches the requested name\n    for (const child of children) {\n      const usage = child.usage;\n      const type = usage.constructor;\n\n      if (type === Array && usage.indexOf(name) > -1) {\n        return child;\n      }\n\n      if (type === String && usage === name) {\n        return child;\n      }\n    }\n\n    // If nothing matches, item is not defined\n    return false;\n  }\n\n  parse(argv, options) {\n    // Override default option values\n    Object.assign(this.config, options);\n\n    if (Array.isArray(this.config.mainColor)) {\n      for (const item in this.config.mainColor) {\n        if (!{}.hasOwnProperty.call(this.config.mainColor, item)) {\n          continue;\n        }\n\n        // Chain all colors to our print method\n        this.printMainColor = this.printMainColor[this.config.mainColor[item]];\n      }\n    } else {\n      this.printMainColor = this.printMainColor[this.config.mainColor];\n    }\n\n    if (Array.isArray(this.config.subColor)) {\n      for (const item in this.config.subColor) {\n        if (!{}.hasOwnProperty.call(this.config.subColor, item)) {\n          continue;\n        }\n\n        // Chain all colors to our print method\n        this.printSubColor = this.printSubColor[this.config.subColor[item]];\n      }\n    } else {\n      this.printSubColor = this.printSubColor[this.config.subColor];\n    }\n\n    if (this.config.help) {\n      // Register default options and commands\n      this.option('help', 'Output usage information');\n      this.command('help', 'Display help', this.showHelp);\n    }\n\n    // Parse arguments using minimist\n    this.raw = parser(argv.slice(1), this.config.minimist);\n    this.binary = path.basename(this.raw._[0]);\n\n    // If default version is allowed, check for it\n    if (this.config.version) {\n      this.checkVersion();\n    }\n\n    const subCommand = this.raw._[1];\n    const helpTriggered = this.raw.h || this.raw.help;\n\n    const args = {};\n    const defined = this.isDefined(subCommand, 'commands');\n    const optionList = this.getOptions();\n\n    Object.assign(args, this.raw);\n    args._.shift();\n\n    // Export sub arguments of command\n    this.sub = args._;\n\n    // If sub command is defined, run it\n    if (defined) {\n      this.runCommand(defined, optionList);\n      return {};\n    }\n\n    // Show usage information if \"help\" or \"h\" option was used\n    // And respect the option related to it\n    if (this.config.help && helpTriggered) {\n      this.showHelp();\n    }\n\n    // Hand back list of options\n    return optionList;\n  }\n\n  showHelp() {\n    const name = this.config.name || this.binary.replace('-', ' ');\n    const firstBig = word => word.charAt(0).toUpperCase() + word.substr(1);\n\n    const parts = [];\n\n    const groups = {\n      commands: true,\n      options: true,\n      examples: true\n    };\n\n    for (const group in groups) {\n      if (this.details[group].length > 0) {\n        continue;\n      }\n\n      groups[group] = false;\n    }\n\n    const optionHandle = groups.options ? '[options] ' : '';\n    const cmdHandle = groups.commands ? '[command]' : '';\n    const value = typeof this.config.value === 'string'\n      ? ' ' + this.config.value\n      : '';\n\n    parts.push([\n      '',\n      `Usage: ${this.printMainColor(name)} ${this.printSubColor(optionHandle + cmdHandle + value)}`,\n      ''\n    ]);\n\n    for (const group in groups) {\n      if (!groups[group]) {\n        continue;\n      }\n\n      parts.push(['', firstBig(group) + ':', '', '']);\n\n      if (group === 'examples') {\n        parts.push(this.generateExamples());\n      } else {\n        parts.push(this.generateDetails(group));\n      }\n\n      parts.push(['', '']);\n    }\n\n    let output = '';\n\n    // And finally, merge and output them\n    for (const part of parts) {\n      output += part.join('\\n  ');\n    }\n\n    if (!groups.commands && !groups.options) {\n      output = 'No sub commands or options available';\n    }\n\n    const usageFilter = this.config.usageFilter;\n\n    // If filter is available, pass usage information through\n    if (typeof usageFilter === 'function') {\n      output = usageFilter(output) || output;\n    }\n\n    console.log(output);\n\n    // eslint-disable-next-line unicorn/no-process-exit\n    process.exit();\n  }\n}\n\nconst instance = new Args();\n\nmodule.exports = instance;\nexports.default = instance;\n"}